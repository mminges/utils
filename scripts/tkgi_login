#!/bin/env bash

set -e

function usage() {

echo -en "\nUsage: "
basename $0
cat <<EOF

          -c       Prints out TKGi Admin creds

EOF
}

function source_opsman_config() {

  CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  source ${CWD}/om_target
}

function get_login_metadata() {

  source_opsman_config

  echo -en "\nGetting TKGi Admin Login Credentials: "

  # Exporting PKS_USER_PASSWORD allows a non-interactive login for  pks get-credentials
  export PKS_USER_PASSWORD=$(om credentials \
    -p pivotal-container-service \
    -c .properties.uaa_admin_password \
    -f secret)
  TKGI_GUID=$(om curl -s -p /api/v0/deployed/products \
    | jq -r '.[] | select(.type == "pivotal-container-service") .guid')
  TKGI_API=$(om curl -s -p /api/v0/staged/products/${TKGI_GUID}/properties \
    | jq -r '.properties.".properties.pks_api_hostname".value')

  if [ $? != 0 ]; then
    echo -e "Failed\n"
  else
    echo -e "Ok\n"
  fi
}

function tkgi_login() {

  get_login_metadata

  pks login -a https://${TKGI_API} -k \
    -u admin \
    -p ${PKS_USER_PASSWORD}

  CLUSTERS=$(pks clusters --json | jq -r '.[].name' | sort)
  declare -a TKGI_CLUSTERS=(${CLUSTERS})

  for index in ${!TKGI_CLUSTERS[@]}; do
    printf "%4d: %s\n" $index ${TKGI_CLUSTERS[$index]}
  done

  read -p 'Choose a TKGi cluster: ' cluster
  echo "You chose: ${TKGI_CLUSTERS[$cluster]}"
  CLUSTER=${TKGI_CLUSTERS[$cluster]}

  pks get-credentials $CLUSTER
  kubectl config use-context $CLUSTER
}

function tkgi_creds() {

  get_login_metadata

  echo "admin ${PKS_USER_PASSWORD}"
}

action=$1

case "$action" in
  -c)
    tkgi_creds
    ;;
  -h)
    usage
    ;;
  *)
    tkgi_login
    ;;
esac
