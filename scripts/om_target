#!/usr/bin/env bash

function usage() {

echo -en "\nUsage: "
basename $0
cat <<EOF

          -a       Add OpsMan to config
                   Will prompt for alias, domain, username and password

          -c       Prints out OpsMan creds

          -d       Deletes an OpsMan target from config

          -g       Grabs commonly used platform credentials

EOF
}

function config() {

  if [[ ! -s ${OM_CONFIG} ]]; then
    echo -e "{\n  \"targets\" : []\n}" > ${OM_CONFIG}
  fi
}

function add_target() {

  config
  tmp_om_config="$(mktemp)"

  read -p 'OpsMan Alias: ' opsman_alias
  read -p 'OpsMan Domain: ' opsman_domain
  read -p 'OpsMan Username: ' opsman_username
  read -s -p 'OpsMan Password: ' opsman_password

  jq '.targets += [{"alias": '\"${opsman_alias}\"', "domain": '\"${opsman_domain}\"', "username": '\"${opsman_username}\"', "password": '\"${opsman_password}\"'}]' ${OM_CONFIG} > ${tmp_om_config}
 
  mv ${tmp_om_config} ${OM_CONFIG}
}

function target() {

  TARGETS=$(cat ${OM_CONFIG} | jq -r '.targets[].alias' | sort)
  declare -a OM_TARGETS=(${TARGETS})

  for index in ${!OM_TARGETS[@]}; do
    printf "%4d: %s\n" $index ${OM_TARGETS[$index]}
  done

  read -p 'Choose a OpsMan target: ' target
  echo "You chose: ${OM_TARGETS[$target]}"
  TARGET=${OM_TARGETS[$target]}
}

function delete_target() {

  target
  OM_METADATA=$(cat ${OM_CONFIG} \
    | jq -r '.targets[] | select(.alias == '\"${TARGET}\"')')
  echo -e "\n$OM_METADATA\n"

  tmp_om_config="$(mktemp)"

  declare -a DECISIONS=(yes no)

  for index in ${!DECISIONS[@]}; do
    printf "%1d: %s\n" $index ${DECISIONS[$index]}
  done

  read -p 'Are you sure you want to delete this target: ' decision 

  (jq 'del(.targets[] | select(.alias == '\"${TARGET}\"'))') < ~/.om_config.json > $tmp_om_config

  mv ${tmp_om_config} ${OM_CONFIG}  

  VERIFY=$(cat ${OM_CONFIG} \
	  | jq -r '.targets[] | select(.alias == '\"${TARGET}\"')')

  [[ ! -z "${VERIFY}" ]] && \
    echo -e "\n${TARGET} was not successfully removed!\n" || \
    echo -e "\n${TARGET} was successfully removed!\n"
}
  

function set_target() {

  target
  OM_METADATA=$(cat ${OM_CONFIG} \
    | jq -r '.targets[] | select(.alias == '\"${TARGET}\"') | "\(.domain) \(.username) \(.password)"')

  export OM_TARGET=https://$(echo "${OM_METADATA}" | cut -d ' ' -f1)
  export OM_USERNAME=$(echo "${OM_METADATA}" | cut -d ' ' -f2)
  export OM_PASSWORD=$(echo "${OM_METADATA}" | cut -d ' ' -f3)
  export OM_SKIP_SSL_VALIDATION=true
}

function opsman_creds() {

  target

  OM_METADATA=$(cat ${OM_CONFIG} \
    | jq -r '.targets[] | select(.alias == '\"${TARGET}\"') | "| \(.username) | \(.password) |"')

  echo "${OM_METADATA}" | column -t
  echo "${OM_METADATA}" | cut -d ' ' -f4 | pbcopy
}

function json_creds() {

  echo -e '{'\"${1}\"': '${2}'}'
}

function get_all_creds() {

  set_target

  CF_ADMIN_CREDS=$(${OM_CLI} credentials -p cf -c .uaa.admin_credentials -t json | jq -r '.')
  UAA_ADMIN_CREDS=$(${OM_CLI} credentials -p cf -c .uaa.admin_client_credentials -t json | jq -r '.')
  BOSH_COMMANDLINE_CREDENTIALS=$(${OM_CLI} curl -s -p /api/v0/deployed/director/credentials/bosh_commandline_credentials | jq -r '.')
  CREDHUB_COMMANDLINE_CREDENTIALS=$(echo "${BOSH_COMMANDLINE_CREDENTIALS}" | \
    sed -e 's/BOSH_/CREDHUB_/g' \
        -e 's/CLIENT_SECRET/SECRET/' \
        -e 's/ENVIRONMENT/SERVER/' \
        -e 's/bosh/credhub/' \
        -e 's|CREDHUB_SERVER=\([0-9\\.]*\) credhub|CREDHUB_SERVER=https://\1:8844 credhub|')

  CF_JSON_CREDS=$(json_creds cf "${CF_ADMIN_CREDS}")
  UAA_JSON_CREDS=$(json_creds uaa "${UAA_ADMIN_CREDS}")
  BOSH_JSON_CREDS=$(json_creds bosh_commandline_credentials "${BOSH_COMMANDLINE_CREDENTIALS}")
  CREDHUB_JSON_CREDS=$(json_creds credhub_commandline_credentials "${CREDHUB_COMMANDLINE_CREDENTIALS}")

  jq \
    --argjson cfCreds "${CF_JSON_CREDS}" \
    --argjson uaaCreds "${UAA_JSON_CREDS}" \
    --argjson boshCreds "${BOSH_JSON_CREDS}" \
    --argjson credhubCreds "${CREDHUB_JSON_CREDS}" \
    '.targets[] | select(.alias == '\"${TARGET}\"') .platform += [$cfCreds, $uaaCreds, $boshCreds, $credhubCreds]' ${OM_CONFIG} | \
        jq -r '. | select(.alias == '\"${TARGET}\"')'
}

OM_CONFIG=${HOME}/.om_config.json
action=$1

case "$action" in
  -a)
    add_target
    ;;
  -c)
    opsman_creds
    ;;
  -g)
    get_all_creds
    ;;
  -d)
    delete_target
    ;;
  -h)
    usage
    ;;
  *)
    set_target
    ;;
esac
